// Site containers
@mixin site-wrap($size : null) {
	@include kp-clearfix;
	width: 100%;
	display: block;
	margin-left: auto;
	margin-right: auto;
	max-width: kp-rem($global--container-width);
	display: block;
	position: relative;

	padding-left: $global--gutter-width;
	padding-right: $global--gutter-width;
	@include kp-mq(sm) {
		padding-left: ($global--gutter-width + 20px);
		padding-right: ($global--gutter-width + 20px);
	}
	@include kp-mq(md) {
		padding-left: ($global--gutter-width + 30px);
		padding-right: ($global--gutter-width + 30px);
	}
	@include kp-mq(lg) {
		padding-left: ($global--gutter-width + 50px);
		padding-right: ($global--gutter-width + 50px);
	}

	@if $size == normal {
		max-width: kp-rem($global--container-width);
	}

	@if $size == narrow {
		max-width: kp-rem(800px);
	}

	@if $size == readability {
		max-width: kp-rem(570px);
	}

}

// Column spacing
@mixin columns($x : true, $y : true, $size : $global--gutter-width) {
	@include kp-clearfix;
	position: relative;
	display: block;
	@if $x {margin-right: - kp-rem($size)}
	@if $y {margin-bottom: - kp-rem($size)}
	@supports (display: flex) {
		display: flex;
		flex-flow: row wrap;
		&:before, &:after {
			display: none;
		}
	}
	& > * {
		float: left;
		width: auto;
		@if $x {padding-right: kp-rem($size)}
		@if $y {padding-bottom: kp-rem($size)}
	}
}

/// Clearfix.
/// @group helpers
/// @example scss - Apply a clear to a row.
/// 	.row {
/// 		@include kp-clearfix();
/// 	}
@mixin kp-clearfix {
	*zoom: 1;

	&:before, &:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}
}

@mixin padding($type : null) {
	@if $type == 'internal-hero' {
		padding-top: kp-rem($global--gutter-width + 25px);
		padding-bottom: kp-rem($global--gutter-width + 25px);
		@include kp-mq(sm) {
			padding-top: kp-rem($global--gutter-width + 50px);
			padding-bottom: kp-rem($global--gutter-width + 50px);
		}
		@include kp-mq(md) {
			padding-top: kp-rem($global--gutter-width + 70px);
			padding-bottom: kp-rem($global--gutter-width + 70px);
		}
		@include kp-mq(lg) {
			padding-top: kp-rem($global--gutter-width + 100px);
			padding-bottom: kp-rem($global--gutter-width + 100px);
		}
	}

	@if $type == 'internal-hero-small' {
		padding-top: kp-rem($global--gutter-width + 25px);
		padding-bottom: kp-rem($global--gutter-width + 25px);
		@include kp-mq(sm) {
			padding-top: kp-rem($global--gutter-width + 40px);
			padding-bottom: kp-rem($global--gutter-width + 40px);
		}
		@include kp-mq(md) {
			padding-top: kp-rem($global--gutter-width + 40px);
			padding-bottom: kp-rem($global--gutter-width + 40px);
		}
		@include kp-mq(lg) {
			padding-top: kp-rem($global--gutter-width + 40px);
			padding-bottom: kp-rem($global--gutter-width + 40px);
		}
	}

	@if $type == 'homepage-panel' {
		padding-top: kp-rem(40px);
		padding-bottom: kp-rem(40px);
		@include kp-mq(sm) {
			padding-top: kp-rem(40 * 1.5);
			padding-bottom: kp-rem(40 * 1.5);
		}
		@include kp-mq(md) {
			padding-top: kp-rem(40 * 2);
			padding-bottom: kp-rem(40 * 2);
		}
	}

	@if $type == 'content-element' {
		padding-bottom: kp-rem(40px);
		@include kp-mq(xs) {padding-bottom: kp-rem(40px);}
		@include kp-mq(sm) {padding-bottom: kp-rem(40px);}
		@include kp-mq(md) {padding-bottom: kp-rem(40px);}
		@include kp-mq(lg) {padding-bottom: kp-rem(40px);}
	}

	@if $type == 'sidebar-element' {
		padding-bottom: kp-rem(40px);
		border-bottom: 1px solid $mantis-offwhite;
		margin-bottom: kp-rem(40px);
		@include kp-mq(xs) {padding-bottom: kp-rem(40px);}
		@include kp-mq(sm) {padding-bottom: kp-rem(40px);}
		@include kp-mq(md) {padding-bottom: kp-rem(40px);}
		@include kp-mq(lg) {padding-bottom: kp-rem(40px);}
	}

	@if $type == 'site-element' {
		padding: kp-rem(20px) 0;
		@include kp-mq(xs) {padding: kp-rem(20px) 0;}
		@include kp-mq(sm) {padding: kp-rem(30px) 0;}
		@include kp-mq(md) {padding: kp-rem(40px) 0;}
		@include kp-mq(lg) {padding: kp-rem(40px) 0;}
	}
}

// Trim margins
@mixin trim($type : margin, $depth : 1) {
	$first:	'';
	$last:	'';
	@for $i from 0 to $depth {
		$first: $first + ' > :first-child';
		$last: $last + ' > :last-child';

		#{$first} {
			#{$type}-top: 0;
		}

		#{$last} {
			#{$type}-bottom: 0;
		}
	}
}

/// Shorthand for element positioning.
/// @group helpers
/// @param {String} $type - Either absolute, fixed or relative
/// @param {Length} $top [null] - Top
/// @param {Length} $right [null] - Right
/// @param {Length} $bottom [null] - Bottom
/// @param {Length} $left [null] - Left
/// @example scss - Position an element to the top left of its parent.
/// 	.hamburger {
/// 		@include kp-abs-position('absolute', $top: 20px, $left: 20px);
/// 	}
@mixin kp-abs-position($type, $top: null, $right: null, $bottom: null, $left: null) {
	position: $type;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}

/// Center block.
/// @group helpers
/// @example scss - Center an image.
/// 	img {
/// 		@include kp-center-block;
/// 	}
/// @example markup - Center an image
/// 	<div>
/// 		<img src="blue-sky.jpg" alt="Blue Sky"/>
/// 	</div>
@mixin kp-center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

/// Horizontally and vertically centers block elements.
/// @group helpers
/// @param {Bool} rel-parent [false] - Set position relative on the parent element
/// @param {Bool} top ['50%'] - Override for the top position.
/// @example scss - Set the (modified) top position of a centered button.
/// 	.click-to-enter {
/// 		@include kp-center-both(true, 45%);
/// 	}
@mixin kp-center-both($rel-parent: false, $top: 50% ) {
	left: 50%;
	position: absolute;
	top: $top;
	transform: translate(-50%, -50%);

	@if $rel-parent {
		& {
			position: relative;
		}
	}
}

/// Vertically center block elements.
/// @group helpers
/// @param {Boolean} rel_parent [false] - Set position relative on the parent element
/// @example scss - Vertically centre a search icon element, and make the parent relative.
/// 	.search-icon {
/// 		@include kp-center-vert(true);
/// 	}
@mixin kp-center-vert($rel-parent: false) {
	position: absolute;
	top: 50%;
	transform: translateY(-50%);

	@if $rel-parent {
		& {
			position: relative;
		}
	}
}

/// No horizontal margin.
/// @group helpers
/// @example scss - Remove horizontal margin.
/// 	.no-hmargin {
/// 		@include kp-no-hmargin();
/// 	}
@mixin kp-no-hmargin {
	margin-left: 0;
	margin-right: 0;
}

/// No horizontal padding.
/// @group helpers
/// @example scss - Remove horizontal padding.
/// 	.no-hpadding {
/// 		@include kp-no-hpadding();
/// 	}
@mixin kp-no-hpadding {
	padding-left: 0;
	padding-right: 0;
}

/// No vertical margin.
/// @group helpers
/// @example scss - Remove vertical margin.
/// 	.no-vmargin {
/// 		@include kp-no-vmargin();
/// 	}
@mixin kp-no-vmargin {
	margin-bottom: 0;
	margin-top: 0;
}

/// No vertical padding.
/// @group helpers
/// @example scss - Remove vertical padding.
/// 	.no-vpadding {
/// 		@include kp-no-vpadding();
/// 	}
@mixin kp-no-vpadding {
	padding-bottom: 0;
	padding-top: 0;
}
